#random port for multiple instances in different ports
server.port=0

#uses more than one server to ensure that the application is still available even if one of the servers is down
spring.kafka.producer.bootstrap-servers=[::1]:9092,[::1]:9094

#serializer used to serialize the key #StringSerializer > key is a string
#Transfered to KafkaProducerProperties
#spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer

#serializer used to serialize the value #JsonSerializer > value is a json
#Transfered to KafkaProducerProperties
#spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

#acks=all > Waits for an acknowledgment from all brokers (slower but more reliable)
#Cabe be used combined with min.insync.replicas=2 to ensure that the data is replicated to at least two brokers
# --replication-factor 5 --config min.insync.replicas=2
spring.kafka.producer.acks=all

#acks=1 > Waits for an acknowledgment from the leader broker only
#Default value is 1
#spring.kafka.producer.acks=1

#acks=0 > Does not wait for an acknowledgment from the broker (faster but less reliable)
#spring.kafka.producer.acks=0

#How many times the producer will retry sending a message before marking it as failed
#Default value is 2147483647
#If we use spring.kafka.producer.properties.delivery.timeout.ms, we should not use this property
#spring.kafka.producer.retries=10

#The amount of time the producer will wait before retrying to send a message
#Default value is 100
#If we use spring.kafka.producer.properties.delivery.timeout.ms, we should not use this property
#spring.kafka.producer.properties.retry.backoff.ms=1000

#The maximum amount of time the producer will wait for a response from the broker
#Default value is 120000 (2 minutes)
#delivery.timeout.ms >= request.timeout.ms + linger.ms
spring.kafka.producer.properties.delivery.timeout.ms=120000

#The amount of time the producer will wait before sending a batch of messages
#Messages received during this period will be buffered and sent together
spring.kafka.producer.properties.linger.ms=0

#The maximum amount of time the producer will wait for a response from the broker
spring.kafka.producer.properties.request.timeout.ms=30000

spring.kafka.producer.properties.enable.idempotence=true
#The number of messages that can be sent to the broker at the same time.
#To work with idempotence, it cannot be greater than 5
spring.kafka.producer.properties.max.in.flight.requests.per.connection=5